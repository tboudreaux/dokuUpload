import argparse
import os
import pathlib

from dokuUpload.doku import upload_to_dokuwiki
from dokuUpload.doku import test_login
from dokuUpload.doku import check_page_exists

from dokuUpload.mimetypes import get_mimetype_handler


def main():
    parser = argparse.ArgumentParser(description="Your CLI tool description.")
    parser.add_argument('-t', '--test', action='store_true', help='Run in test mode (no files needed)')

    args,_ = parser.parse_known_args()

    if not args.test:
        parser.add_argument('files', nargs='+', help='Files to process')
        parser.add_argument('-f', '--filetype', type=str,
                            help="file extension type to force use (ignore file extension and use this instead)", default=None)
        parser.add_argument('-o', '--overwrite', action='store_true', help='Overwrite existing pages')
    else:
        pass
    args = parser.parse_args()

    if args.test:
        print("Testing Login to dokuWiki!")
        if test_login():
            print("Login successful!")
        else:
            from dokuUpload.utils.setup import CONFIG
            print(f"Login failed! {CONFIG.DOKU_USER}:{CONFIG.DOKU_PASSWORD}@{CONFIG.DOKU_URL}")
    else:
        for file in args.files:
            if check_page_exists(os.path.basename(file)) and not args.overwrite:
                print(f"Page {os.path.basename(file)} already exists")
                continue
            assert os.path.exists(file), f'File {file} does not exist'
            fileName = os.path.basename(file)

            print(f'Uploading {file}...')

            mimeSuffix = args.filetype if args.filetype else pathlib.Path(file).suffix
            handler = get_mimetype_handler(mimeSuffix)
            content, metadata, dMarkdown = handler(file)

            upload_to_dokuwiki(content, metadata, fileName, dMarkdown)


if __name__ == '__main__':
    main()
